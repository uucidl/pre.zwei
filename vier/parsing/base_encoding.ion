import std

struct BaseEncoding {
    base64: HParser*; // we only bother to support base64 for now.
}

// Create parsers for base encoding.
func base_encoding_rfc4648(abnf: ABNF_RFC5234*, allocator: Allocator*): BaseEncoding {
    allocator_data := hallocator_bridge_data(allocator);
    a := hallocator_bridge(&allocator_data);

    rules: BaseEncoding;
    bsfdig := h_choice__m(a, abnf.ALPHA, abnf.DIGIT, h_ch__m(a, '+'), h_ch__m(a, '/'), 0);
    bsfdig_4bit := h_in__m(a, (:uint8*)"AEIMQUYcgkosw048", 16);
    bsfdig_2bit := h_in__m(a, (:uint8*)"AQgw", 4);
    base64_3bytes := h_repeat_n__m(a, bsfdig, 4);

    padding := h_ch__m(a, '=');
    base64_2bytes := h_sequence__m(a, bsfdig, bsfdig, bsfdig_4bit, padding, 0);
    base64_1byte := h_sequence__m(a, bsfdig, bsfdig_2bit, padding, padding, 0);

    rules.base64 = h_action__m(a,
        h_sequence__m(a,
            h_many__m(a, base64_3bytes),
            h_optional__m(a, h_choice__m(a, base64_2bytes, base64_1byte, 0)), 0),
        base64_action, 0);

    return rules;
}

func test_base_encoding() {
    arena := std.arena_allocator(0, 0);
    memdata := hallocator_bridge_data(&arena.base);
    mem := hallocator_bridge(&memdata);

    abnf := abnf_rfc5234(&arena.base);
    rules := base_encoding_rfc4648(&abnf, &arena.base);
    inputs: char*[] = {
            "", "Zg==", "Zm8=", "Zm9v", "Zm9vYg==", "Zm9vYmE=", "Zm9vYmFy",
    };
    outputs: char*[] = {
            "", "f", "fo", "foo", "foob", "fooba", "foobar",
    };
    num_inputs := sizeof(inputs) / sizeof(inputs[0]);
    for (i:=0; i < num_inputs; i++) {
        input := inputs[i];
        r := h_parse__m(mem, rules.base64, (:uint8*)input, libc.strlen(input));
        #assert(r.ast.token_type == TT_BYTES);
        output := outputs[i];
        #assert(libc.strlen(output) == r.ast.bytes.len);
        for (ci:=0; ci < r.ast.bytes.len && output[ci]; ci++) {
            #assert(r.ast.bytes.token[ci] == output[ci]);
        }
    }
    std.arena_free(&arena);
}

func base64_action(p: HParseResult const*, user_data: void*): HParsedToken* {
    // Semantic action converting input ascii digits into bytes.
    #assert(p.ast.token_type == TT_SEQUENCE);
    #assert(p.ast.seq.used == 2);

    #assert(p.ast.seq.elements[0].token_type == TT_SEQUENCE);
    b64_3bytes_blocks := p.ast.seq.elements[0].seq;

    output_bytes_size := 3 * b64_3bytes_blocks.used + 2 /* max size necessary */;
    output_bytes: uint8 *const = h_arena_malloc(p.arena, output_bytes_size);
    output_bytes_end := output_bytes + output_bytes_size;
    output_bytes_last := output_bytes;

    // Concatenate 3x bytes (4x sextets) blocks:
    for (block_index:=0; block_index < b64_3bytes_blocks.used; block_index++) {
        block := b64_3bytes_blocks.elements[block_index];
        #assert(block.token_type == TT_SEQUENCE);
        #assert(block.seq.used == 4);
        digits := block.seq.elements;
        #assert(output_bytes_last + 3 <= output_bytes_end);
        sextet0 := bsf_decode(digits[0].uint);
        sextet1 := bsf_decode(digits[1].uint);
        sextet2 := bsf_decode(digits[2].uint);
        sextet3 := bsf_decode(digits[3].uint);
        *output_bytes_last++ = (bits_uint8(sextet0, 0, 6)<<2) | (bits_uint8(sextet1, 4, 2));
        *output_bytes_last++ = (bits_uint8(sextet1, 0, 4)<<4) | (bits_uint8(sextet2, 2, 4));
        *output_bytes_last++ = (bits_uint8(sextet2, 0, 2)<<6) | (bits_uint8(sextet3, 0, 6));
    }
    // Concatenate b64 end block (_2 or _1) where the '=' sentinel may indicate a stop
    end := p.ast.seq.elements[1];
    if (end.token_type == TT_SEQUENCE) {
        digits := end.seq.elements;
        count := (digits[2].uint == '=') ? 1 : 2;
        #assert(output_bytes_last + count <= output_bytes_end);
        sextet0 := bsf_decode(digits[0].uint);
        sextet1 := bsf_decode(digits[1].uint);
        *output_bytes_last++ = (bits_uint8(sextet0, 0, 6)<<2) | (bits_uint8(sextet1, 4, 2));
        if (digits[2].uint != '=') {
            sextet2 := bsf_decode(digits[2].uint);
            *output_bytes_last++ = (bits_uint8(sextet1, 0, 4) << 4) | (bits_uint8(sextet2, 2, 4));
        }
    }
    #assert(output_bytes_last <= output_bytes_end);
    return h_make_bytes(p.arena, output_bytes, output_bytes_last - output_bytes);
}

// encoded digits in [first, last) are turned into bytes [first, return_value)
func base64_decode_range(first: uint8*, last: uint8*): uint8* {
    bsf_decode_range_inplace(first, last); // after which [first,last) contains sextets
    return gather_8from6bits(first, last, first);
}

func bsf_decode(x: uint8): uint8 {
    switch(x) {
    case 'A'...'Z': return x - 'A';
    case 'a'...'z': return x - 'a' + 26;
    case '0'...'9': return x - '0' + 52;
    case '+': return 62;
    case '/': return 63;
    default: #assert(0); // invalid input
    }
    return -1;
}

func min_uint8(a: uint8, b: uint8): uint8 {
    return a < b ? a : b;
}

func bits_uint8(x: int, start: int, num_bits: int): uint8 {
    return uint8((x >> start) & ((1<<num_bits) - 1));
}

func gather_8from6bits(f: uint8*, l: uint8*, dst: uint8*): uint8* {
    num_available_source_bits := 0;
    s: uint8;
    num_writeable_dest_bits := 8;
    d: uint8;

    num := l - f;
    num_quads := num / 4;
    while (num_quads--) {
        dst[0] = (bits_uint8(f[0], 0, 6)<<2) | (bits_uint8(f[1], 4, 2));
        dst[1] = (bits_uint8(f[1], 0, 4)<<4) | (bits_uint8(f[2], 2, 4));
        dst[2] = (bits_uint8(f[2], 0, 2)<<6) | (bits_uint8(f[3], 0, 6));
        f += 4;
        dst += 3;
    }

    num = l - f;
    num_triples := num / 3;
    while (num_triples--) {
        dst[0] = (bits_uint8(f[0], 0, 6) << 2) | (bits_uint8(f[1], 4, 2));
        dst[1] = (bits_uint8(f[1], 0, 4) << 4) | (bits_uint8(f[2], 2, 4));
        f += 3;
        dst += 2;
    }

    num = l - f;
    num_pairs := num / 2;
    while (num_pairs--) {
        dst[0] = (bits_uint8(f[0], 0, 6) << 2) | (bits_uint8(f[1], 4, 2));
        f += 2;
        dst += 1;
    }

    num = l - f;
    while (num--) {
        dst[0] = bits_uint8(f[0], 0, 6) << 2;
        f++;
        dst++;
    }

    return dst;
}


func bsf_decode_range_inplace(f: uint8*, l: uint8*) {
    while (f != l) {
        *f++ = bsf_decode(*f);
    }
}

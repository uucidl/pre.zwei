struct InternetMessageFormatRFC5322 {
    FWS, CFWS, quoted_string: HParser*;
}

func internet_message_format_rfc5322(abnf: ABNF_RFC5234*, allocator: Allocator*): InternetMessageFormatRFC5322 {
    allocator_data := hallocator_bridge_data(allocator);
    a := hallocator_bridge(&allocator_data);

    rules: InternetMessageFormatRFC5322;

    // ## 3.2.2.  Folding White Space and Comments

    // Folding white space
    rules.FWS = h_choice__m(a,
        h_sequence__m(a, h_many__m(a, abnf.WSP), h_ignore__m(a, abnf.CRLF), h_many1__m(a, abnf.WSP), 0),
        h_many1__m(a, abnf.WSP),
        0);

    // printable US-ASCII characters not including (, ), backslash
    ctext := h_choice__m(a, h_ch_range__m(a, 33, 39), h_ch_range__m(a, 42, 91), h_ch_range__m(a, 93, 126), 0);
    comment := h_indirect__m(a);

    quoted_pair := h_right__m(a, h_ch__m(a, '\\'), h_choice__m(a, abnf.VCHAR, abnf.WSP, 0));
    ccontent := h_choice__m(a, ctext, quoted_pair, comment, 0);

    h_bind_indirect(
        comment,
        h_action__m(a,
            h_sequence__m(
                a,
                h_ch__m(a, '('),
                h_many__m(a, h_sequence__m(a, h_optional__m(a, rules.FWS), ccontent, 0)),
                h_optional__m(a, rules.FWS),
                h_ch__m(a, ')'),
                0
            ),
            h_act_ignore, // comments are ignored, so far I don't see what values they would have
            0
        ));

    rules.CFWS = h_choice__m(a,
        h_sequence__m(a,
            h_many1__m(a, h_sequence__m(a, h_optional__m(a, rules.FWS), comment, 0)),
            h_optional__m(a, rules.FWS), 0),
        rules.FWS,
        0);

    // ## 3.2.4.  Quoted Strings
    qtext := h_choice__m(a, h_ch__m(a, 33), h_ch_range__m(a, 35, 91), h_ch_range__m(a, 93, 126), 0);
    qcontent := h_choice__m(a, qtext, quoted_pair, 0);
    optional_fws := h_many__m(a, rules.FWS); // using many instead of optional to prevent emitting TT_NONE results.
    rules.quoted_string = h_action__m(a, h_middle__m(a,
            abnf.DQUOTE,
            h_sequence__m(a,
                h_many__m(a, h_sequence__m(a, optional_fws, qcontent, 0)),
                optional_fws, 0),
            abnf.DQUOTE
        ), h_act_flatten, 0);

    optional_cfws := h_many__m(a, rules.CFWS); // using many instead of optional to prevent emitting TT_NONE results

    rules.quoted_string = h_middle__m(a,
        optional_cfws,
        rules.quoted_string,
        optional_cfws);
    return rules;
}

func test_internet_message_format() {
    arena := std.arena_allocator(0, 0);

    verbose := false;

    abnf := abnf_rfc5234(&arena.base);
    rules := internet_message_format_rfc5322(&abnf, &arena.base);

    allocator_data := hallocator_bridge_data(&arena.base);
    mem := hallocator_bridge(&allocator_data);

    libc.printf("Testing quoted_string parser .................... ");
    quoted_string := rules.quoted_string;
    /* Empty string: */ {
        result := h_parse__m(mem, quoted_string, (:uint8*)"\"\"", 2);
        #assert(result);
        if (result) {
            if (verbose) { h_pprint(libc.stdout, result.ast, 4, 4); }
            #assert(compare_hammer_sequence_with_string(result.ast.seq, ""));
        }
    }
    /* Trivial string */ {
        result := h_parse__m(mem, quoted_string, (:uint8*)"\"a\"", 3);
        #assert(result);
        if (result) {
            if (verbose) { h_pprint(libc.stdout, result.ast, 4, 4); }
            #assert(compare_hammer_sequence_with_string(result.ast.seq, "a"));
        }
    }
    {
        result := h_parse__m(mem, quoted_string, (:uint8*)"\"a c\"", 5);
        #assert(result);
        if (result) {
            if (verbose) { h_pprint(libc.stdout, result.ast, 4, 4); }
            #assert(compare_hammer_sequence_with_string(result.ast.seq, "a c"));
        }
    }

    /* String with folding white space */ {
        result := h_parse__m(mem, quoted_string, (:uint8*)"\"  this is a piece of\r\n text\"", 32);
        #assert(result);
        if (result) {
            if (verbose) { h_pprint(libc.stdout, result.ast, 4, 4); }
            #assert(compare_hammer_sequence_with_string(result.ast.seq, "  this is a piece of text"));
        }
    }

    /* String with preceding comment */ {
        result := h_parse__m(mem, quoted_string, (:uint8*)"(test case) \"a\" (with comments)", 32);
        #assert(result);
        if (result) {
            if (verbose) { h_pprint(libc.stdout, result.ast, 4, 4); }
            #assert(compare_hammer_sequence_with_string(result.ast.seq, "a"));
        }
    }
    libc.printf(" OK\n");

    std.arena_free(&arena);
}

func compare_hammer_sequence_with_string(seq: HCountedArray*, str: char const*): bool {
    f := &seq.elements[0];
    l := &seq.elements[seq.used];
    while (f != l && *str) {
        tok := *f;
        if (tok.token_type == TT_NONE) {
            f++;
        } else if (tok.token_type != TT_NONE) {
            #assert(tok.token_type == TT_UINT);
            if (tok.uint != *str) {
                break;
            }
            f++;
            str++;
        }
    }
    all_equal := f == l && *str == 0;
    #assert(all_equal);
    return all_equal;
}
